---
- ansible.builtin.import_tasks: "assert.yml"

- name: "Create an s3key for IONOS DCD"
  ionoscloudsdk.ionoscloud.s3key:
    token: "{{ ionos_token | default(omit) }}"
    user: "{{ s3_create_bucket_ionos_user | default(ionos_username | default(omit)) }}"
    idempotency: true
  register: s3_create_bucket_r_s3_key

- name: "Create bucket '{{ s3_create_bucket_bucket_name }}'"
  amazon.aws.s3_bucket:
    access_key: "{{ s3_create_bucket_r_s3_key.s3key.id }}"
    secret_key: "{{ s3_create_bucket_r_s3_key.s3key.properties.secret_key }}"
    state: "present"
    region: "{{ s3_create_bucket_region }}"
    endpoint_url: "{{ s3_create_bucket_url }}"
    #versioning: "{{ s3_create_bucket_bucket_versioning }}"
    #policy: "{{ s3_create_bucket_bucket_policy }}"
    name: "{{ s3_create_bucket_bucket_name }}"

- name: "Configure a S3 lifecycle rule to delete incomplete S3 Multipart Upload"
  community.aws.s3_lifecycle:
    aws_access_key: "{{ s3_create_bucket_r_s3_key.s3key.id }}"
    aws_secret_key: "{{ s3_create_bucket_r_s3_key.s3key.properties.secret_key }}"
    name: "{{ s3_create_bucket_bucket_name }}"
    abort_incomplete_multipart_upload_days: 1
    state: "present"
    status: "enabled"
    rule_id: "delete incomplete S3 Multipart Upload"
    endpoint_url: "{{ s3_create_bucket_url }}"
    region: "{{ s3_create_bucket_region }}"

- name: "Add/remove CORS Settings on web access"
  community.aws.aws_s3_cors:
    aws_access_key: "{{ s3_create_bucket_r_s3_key.s3key.id }}"
    aws_secret_key: "{{ s3_create_bucket_r_s3_key.s3key.properties.secret_key }}"
    endpoint_url: "{{ s3_create_bucket_url }}"
    region: "{{ s3_create_bucket_region }}"
    name: "{{ s3_create_bucket_bucket_name }}"
    state: "{{ s3_create_bucket_cors_settings | ternary('present', 'absent') }}"
    rules:
      - allowed_origins: "{{ s3_create_bucket_allowed_origins }}"
        allowed_methods: "{{ s3_create_bucket_allowed_methods }}"
        allowed_headers: "{{ s3_create_bucket_allowed_headers }}"
        expose_headers: "{{ s3_create_bucket_expose_headers }}"
        max_age_seconds: "{{ s3_create_bucket_max_age_seconds }}"

- name: "Configure lifecycle rules"
  community.aws.s3_lifecycle:
    aws_access_key: "{{ s3_create_bucket_r_s3_key.s3key.id }}"
    aws_secret_key: "{{ s3_create_bucket_r_s3_key.s3key.properties.secret_key }}"
    name: "{{ s3_create_bucket_bucket_name }}"
    expiration_days: "{{ s3_create_bucket_lifecycle_rule.rule_expiration_days | default(omit) }}"
    noncurrent_version_expiration_days: "{{ s3_lifecycle_rule.rule_noncurrent_version_expiration_days | default(omit) }}"
    prefix: "{{ s3_create_bucket_lifecycle_rule.rule_prefix | default(omit) }}"
    state: "present"
    status: "enabled"
    rule_id: "{{ s3_create_bucket_lifecycle_rule.rule_name }}"
    endpoint_url: "{{ s3_create_bucket_url }}"
    region: "{{ s3_create_bucket_region }}"
  loop: "{{ s3_create_bucket_lifecycle_rules }}"
  loop_control:
    loop_var: s3_create_bucket_lifecycle_rule

# Store the access key, access secret, bucket_name and url in one 1PW item.
- name: "Push credentials to 1password"
  dbildungscloud.onepwd.item:
    credentials: "{{ op_credentials }}"
    vault: "{{ s3_create_bucket_1pw_target.vault }}"
    session_shorthand: ansible-run
    name: "{{ s3_create_bucket_1pw_target.item }}"
    fields:
      - name: "{{ s3_create_bucket_1pw_target.bucket_name_1pw_field_name }}"
        type: "text"
        value: "{{ s3_create_bucket_bucket_name }}"
        section: "{{ s3_create_bucket_1pw_target.credentials_section_name }}"
      - name: "{{ s3_create_bucket_1pw_target.access_key_1pw_field_name }}"
        type: "text"
        value: "{{ s3_create_bucket_r_s3_key.s3key.id }}"
        section: "{{ s3_create_bucket_1pw_target.credentials_section_name }}"
      - name: "{{ s3_create_bucket_1pw_target.access_secret_1pw_field_name }}"
        type: "password"
        value: "{{ s3_create_bucket_r_s3_key.s3key.properties.secret_key }}"
        section: "{{ s3_create_bucket_1pw_target.credentials_section_name }}"
      - name: "{{ s3_create_bucket_1pw_target.url_1pw_field_name }}"
        type: "text"
        value: "{{ s3_create_bucket_1pw_target.url }}"
        section: "{{ s3_create_bucket_1pw_target.credentials_section_name }}"
  loop: "{{ s3_create_bucket_1pw_targets }}"
  loop_control:
    loop_var: s3_create_bucket_1pw_target
  when:
    - s3_create_bucket_1pw_targets | length > 1
